@using MiniFigures.Data
@using MiniFigures.Models

@inject IMiniFigureService MiniFigureService
@inject ISeriesService SeriesService
@inject NavigationManager NavigationManager

<div class="cardBig" style="border-color:@Serie.SeriesColor;margin-left:auto;margin-right:auto">
    <h3 style="color:@Serie.SeriesColor">@Serie.DisplayName</h3>
    <table class="cardTable TableOne">
        <tr>
            <td class="label">Name:</td>
            <td>
                <input for="Name" class="form-control txtCenter" @bind="@OneMiniFigures.Name" />
            </td>
        </tr>
        <tr>
            <td class="label">Number:</td>
            <td><input for="Number" class="form-control txtCenter" style="margin-left:auto ;margin-right:auto" @onchange="@checkNumber" placeholder="@OneMiniFigures.Number" /></td>
        </tr>
        <tr>
            <td class="label">In display:</td>
            <td>
                <input class="display" type="button" style="@isTrue" @onclick="changeTrueFalse" value="Yes" />
                <input class="display" type="button" style="@isFalse" @onclick=" changeTrueFalse" value="No" />
            </td>
        </tr>
        <tr>
            <td class="label">Ownd openend:</td>
            <td>
                <a class="fas fa-minus-square" @onclick="DecrementOpen" style="color:@Serie.SeriesColor; margin-right:1rem" />
                @OneMiniFigures.CountOpened
                <a class="fas fa-plus-square" @onclick="IncrementOpen" style="color:@Serie.SeriesColor; margin-left:1rem" />
            </td>
        </tr>
        <tr>
            <td class="label">Ownd sealed:</td>
            <td>
                <a class="fas fa-minus-square" @onclick="DecrementSealed" style="color:@Serie.SeriesColor; margin-right:1rem" />
                @OneMiniFigures.CountSealed
                <a class="fas fa-plus-square" @onclick="IncrementSealed" style="color:@Serie.SeriesColor; margin-left:1rem" />
            </td>
        </tr>
        <tr>
            <td class="label">Image:</td>
            <td>
                <input for="Name" class="form-control infotable txtCenter" @bind="@OneMiniFigures.Image" />
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <img class="imgSmall" src="/images/@Serie.Name/@OneMiniFigures.Image" alt="Picture of @OneMiniFigures.Name" />

            </td>
        </tr>
    </table>
    <div id="bottom">
        <div style="float:right; margin-right:0px">
            <div class="dropdown">
                <input type="button" class="btn btn-light" value="More" />
                <div class="dropdown-content">
                    <div class="btn-group-vertical">
                        <input class="btn btn-outline-warning" type="button" @onclick="resetfigure" value="Reset Figure" />
                        <input class="btn btn-outline-danger" type="button" @onclick="DeleteShow" value="Delete Figure">
                    </div>
                </div>
            </div>
            <input type="button" class="btn btn btn-outline-success" value="Save" @onclick="() => Save(OneMiniFigures.Number)" />
        </div>
    </div>
    @if (ShowDelete)
    {
        <div class="modal fade show" style="display:block" aria-modal="true" role="dialog" @onclick="@DeleteCancel">
            <div class="modal-dialog" @onclick:stopPropagation="true" style="margin-top:50%;width:80%">
                <div class="modal-content" style="background-color:ivory">
                    <div class="modal-header">
                        <h4>Confirm Delete</h4>
                        <button type="button" class="close" @onclick="@DeleteCancel">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete:</p>
                        <h3>ID: @OneMiniFigures.Number</h3>
                        <h3>Name: @OneMiniFigures.Name</h3>
                    </div>
                    <div class="modal-footer">
                        <input type="button" class="btn btn-outline-dark" @onclick="@DeleteCancel" value="Cancel" />
                        <input type="button" class="btn btn-danger" @onclick="() => deleteFigure(OneMiniFigures.ID)" value="Delete" />
                    </div>
                </div>
            </div>
        </div>
    }
</div>
<div style="display:@ShowWarningForNumber;margin-top:10rem ; color:red">
    Minifigure with Number: @CurrentNumber <br />already exists!
</div>

@code {
    [Parameter]
    public int Number { get; set; }
    [Parameter]
    public MiniFigure OneMiniFigures { get; set; }
    [Parameter]
    public Series Serie { get; set; }

    List<MiniFigure> ListOfMiniFigures = new List<MiniFigure>();
    
    protected bool CanSave { get; set; }
    protected bool Existing { get; set; }
    public bool ShowDelete { get; set; } = false;

    protected int? CurrentNumber { get; set; }

    protected string isFalse { get; set; }
    protected string isTrue { get; set; }
    protected string ShowWarningForNumber { get; set; } = "none";

    protected override void OnParametersSet()
    {
        trueOrFalse();
        ListOfMiniFigures = MiniFigureService.GetMiniFigures(Serie.Name);
    }
    public void DeleteShow() => ShowDelete = true;
    public void DeleteCancel() => ShowDelete = false;
    //calculations
    private void IncrementOpen()
    {
        OneMiniFigures.CountOpened++;
    }
    private void DecrementOpen()
    {
        if (OneMiniFigures.CountOpened != 0)
        {
            OneMiniFigures.CountOpened--;
        }
    }
    private void IncrementSealed()
    {
        OneMiniFigures.CountSealed++;
    }
    private void DecrementSealed()
    {
        if (OneMiniFigures.CountSealed != 0)
        {
            OneMiniFigures.CountSealed--;
        }
    }
    void deleteFigure(string id)
    {
        MiniFigureService.DeleteFigure(id);
        NavigationManager.NavigateTo($"/{Serie.Name}",true);
    }
    public void resetfigure()
    {
        OneMiniFigures.Displayed = false;
        OneMiniFigures.CountOpened = 0;
        OneMiniFigures.CountSealed = 0;
        trueOrFalse();
    }
    private async Task Save(int Number)
    {
        await MiniFigureService.EditFigure(OneMiniFigures.ID, OneMiniFigures, Serie.Name);
    }
    void goBack()
    {
        NavigationManager.NavigateTo($"/{Serie.Name}/{OneMiniFigures.Number}", true);
    }
    // check if Number is existing in db
    void isExist(int? Number) //combine with checkNumber????
    {
        foreach (var fig in ListOfMiniFigures)
        {
            if (Number == fig.Number)
            {
                Existing = true;
                break;
            }
            else
            {
                Existing = false;
            }
        }
    }
    void checkNumber(ChangeEventArgs args)
    {
        if (args != null)
        {
            CurrentNumber = Convert.ToInt32(args.Value);
            isExist(CurrentNumber);

            if (Existing || CurrentNumber == 0)
            {
                ShowWarningForNumber = "inline";
                Existing = false;
            }
            else
            {
                ShowWarningForNumber = "none";
                OneMiniFigures.Number = Convert.ToInt32(args.Value);
                CurrentNumber = null;
                CanSave = true;
            }
        }
    }
    void trueOrFalse()
    {
        if (OneMiniFigures.Displayed)
        {
            isTrue = "color:green";
            isFalse = "color: grey";
        }
        else
        {
            isTrue = "color: grey";
            isFalse = "color:red";
        }
    }
    void changeTrueFalse()
    {
        if (OneMiniFigures.Displayed)
        {
            isTrue = "color: grey";
            isFalse = "color:red";
            OneMiniFigures.Displayed = false;
        }
        else
        {
            isTrue = "color:green";
            isFalse = "color: grey";
            OneMiniFigures.Displayed = true;
        }
    }
}