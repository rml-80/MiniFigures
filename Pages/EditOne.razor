@using MiniFigures.Data
@using MiniFigures.Models
@inject NavigationManager NavigationManager
@inject IMiniFigureService MiniFigureService
@inject ISeriesService SeriesService

<link href="/css/Serie.css" rel="stylesheet" />

<div class="cardBig" style="border-color:@serie.SeriesColor;margin-left:auto;margin-right:auto">
    <h3 style="color:@serie.SeriesColor">@serie.DisplayName</h3>
    <table class="cardTable TableOne">
        <tr>
            <td class="label">Name:</td>
            <td>
                <input for="Name" class="form-control txtCenter" @bind="@OneFigure.Name" />
            </td>
        </tr>
        <tr>
            <td class="label">Number:</td>
            <td><input for="Number" class="form-control txtCenter" style="margin-left:auto ;margin-right:auto" @onchange="@checkNumber" placeholder="@OneFigure.Number" /></td>
        </tr>
        <tr>
            <td class="label">In display:</td>
            <td>
                <input class="display" type="button" style="@isTrue" @onclick="changeTrueFalse" value="Yes" />
                <input class="display" type="button" style="@isFalse" @onclick=" changeTrueFalse" value="No" />
            </td>
        </tr>
        <tr>
            <td class="label">Ownd openend:</td>
            <td>
                <a class="fas fa-minus-square" @onclick="DecrementOpen" style="color:@serie.SeriesColor; margin-right:1rem" />

                @OneFigure.CountOpened
                <a class="fas fa-plus-square" @onclick="IncrementOpen" style="color:@serie.SeriesColor; margin-left:1rem" />
            </td>
        </tr>
        <tr>
            <td class="label">Ownd sealed:</td>
            <td>
                <a class="fas fa-minus-square" @onclick="DecrementSealed" style="color:@serie.SeriesColor; margin-right:1rem" />
                @OneFigure.CountSealed
                <a class="fas fa-plus-square" @onclick="IncrementSealed" style="color:@serie.SeriesColor; margin-left:1rem" />
            </td>
        </tr>
        <tr>
            <td class="label">Image:</td>
            <td>
                <input for="Name" class="form-control infotable txtCenter" @bind="@OneFigure.Image" />
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <img class="imgSmall" src="/images/@serie.Name/@OneFigure.Image" alt="Picture of @OneFigure.Name" />

            </td>
        </tr>
    </table>
    <div id="bottom">
        <div style="float:right; margin-right:0px">
            <div class="dropdown">
                <input type="button" class="btn btn-light" value="More" />
                <div class="dropdown-content">
                    <div class="btn-group-vertical">
                        <input class="btn btn-outline-warning" type="button" @onclick="resetfigure" value="Reset Figure" />
                        <input class="btn btn-outline-danger" type="button" @onclick="DeleteShow" value="Delete Figure">
                    </div>
                </div>
            </div>
            
            <input type="button" class="btn btn btn-outline-success" value="Save" @onclick="() => Save(OneFigure.Number)" />
        </div>
    </div>
    @if (showDelete)
    {
        <div class="modal fade show" style="display:block" aria-modal="true" role="dialog" @onclick="@DeleteCancel">
            <div class="modal-dialog" @onclick:stopPropagation="true" style="margin-top:50%;width:80%">
                <div class="modal-content" style="background-color:ivory">
                    <div class="modal-header">
                        <h4>Confirm Delete</h4>
                        <button type="button" class="close" @onclick="@DeleteCancel">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete:</p>
                        <h3>ID: @OneFigure.Number</h3>
                        <h3>Name: @OneFigure.Name</h3>
                    </div>
                    <div class="modal-footer">
                        <input type="button" class="btn btn-outline-dark" @onclick="@DeleteCancel" value="Cancel" />
                        <input type="button" class="btn btn-danger" @onclick="() => deleteFigure(OneFigure.ID)" value="Delete" />
                    </div>
                </div>
            </div>
        </div>
    }
</div>
<div style="display:@ShowWarningForNumber;margin-top:10rem ; color:red">
    Minifigure with Number: @currentNumber <br />already exists!
</div>

@code {
    [Parameter]
    public int number { get; set; }
    [Parameter]
    public string serieToShow { get; set; }
    [Parameter]
    public MiniFigure OneFigure { get; set; }
    [Parameter]
    public Series serie { get; set; }

    protected bool canSave { get; set; }
    protected bool Existing { get; set; }
    public bool showDelete { get; set; } = false;

    List<MiniFigure> ListOfMF = new List<MiniFigure>();

    protected int? currentNumber { get; set; }

    protected string isFalse { get; set; }
    protected string isTrue { get; set; }
    protected string ShowWarningForNumber { get; set; } = "none";

    protected override void OnParametersSet()
    {
        trueOrFalse();
        ListOfMF = MiniFigureService.GetMiniFigures(serie.Name);
    }
    public void DeleteShow() => showDelete = true;
    public void DeleteCancel() => showDelete = false;
    //calculations
    private void IncrementOpen()
    {
        OneFigure.CountOpened++;
    }
    private void DecrementOpen()
    {
        if (OneFigure.CountOpened != 0)
        {
            OneFigure.CountOpened--;
        }
    }
    private void IncrementSealed()
    {
        OneFigure.CountSealed++;
    }
    private void DecrementSealed()
    {
        if (OneFigure.CountSealed != 0)
        {
            OneFigure.CountSealed--;
        }
    }
    void deleteFigure(string id)
    {
        MiniFigureService.DeleteFigure(id);
        NavigationManager.NavigateTo($"/{serie.Name}",true);
    }
    public void resetfigure()
    {
        OneFigure.Displayed = false;
        OneFigure.CountOpened = 0;
        OneFigure.CountSealed = 0;
        trueOrFalse();
    }
    private async Task Save(int number)
    {
        await MiniFigureService.EditFigure(OneFigure.ID, OneFigure, serie.Name);
    }
    void goBack()
    {
        NavigationManager.NavigateTo($"/{serie.Name}/{OneFigure.Number}", true);
    }
    // check if number is existing in db
    void isExist(int? number) //combine with checkNumber????
    {
        foreach (var fig in ListOfMF)
        {
            if (number == fig.Number)
            {
                Existing = true;
                break;
            }
            else
            {
                Existing = false;
            }
        }
    }
    void checkNumber(ChangeEventArgs args)
    {
        if (args != null)
        {
            currentNumber = Convert.ToInt32(args.Value);
            isExist(currentNumber);

            if (Existing || currentNumber == 0)
            {
                ShowWarningForNumber = "inline";
                Existing = false;
            }
            else
            {
                ShowWarningForNumber = "none";
                OneFigure.Number = Convert.ToInt32(args.Value);
                currentNumber = null;
                canSave = true;
            }
        }
    }
    void trueOrFalse()
    {
        if (OneFigure.Displayed)
        {
            isTrue = "color:green";
            isFalse = "color: grey";

        }
        else
        {
            isTrue = "color: grey";
            isFalse = "color:red";
        }
    }
    void changeTrueFalse()
    {
        if (OneFigure.Displayed)
        {
            isTrue = "color: grey";
            isFalse = "color:red";
            OneFigure.Displayed = false;
        }
        else
        {
            isTrue = "color:green";
            isFalse = "color: grey";
            OneFigure.Displayed = true;
        }
    }
}