@page "/{serieToShow}/{number:int}"
@using MiniFigures.Data
@using MiniFigures.Models
@inject NavigationManager NavigationManager
@inject IMiniFigureService Mini
@inject ISeriesService SeriesService

<div class="card-deck">
    <div class="card-body" style="background-color:@Color; max-width: 630px; height:880px ;padding:30px; margin:10px; border-radius:30px">
                <div class="card-body" style="background-color:white; text-align: center;width: 570px; height: 820px; border-radius: 30px">
                    <img src="@figure.ImgURL" style="max-width:460px;height:460px" alt="Picture of @figure.Name" />
                    @if (edit)
                    {
                <input for="Name" class="form-control" @bind="@figure.Name" style="font-size:2rem" />
                    <table style="font-size:1.5rem">
                        <tr>
                            <td style="text-align:right; width:40%">Number:</td>
                            <td style="width:30%; text-align:center"><input for="Name" class="form-control" @bind="@figure.Number" style="width:80px; font-size:1.5rem; margin:auto;text-align:center" /></td>
                        </tr>
                        <tr>
                            <td style="text-align:right; width:40%">In display:</td>
                            <td style="width:30%">True | False</td>
                        </tr>
                        <tr>
                            <td style="text-align:right">Ownd openend:</td>
                            <td><a class="fas fa-plus-square"></a> | @figure.CountOpened | <a class="fas fa-minus-square"></a></td>
                        </tr>
                        <tr>
                            <td style="text-align:right">Ownd sealed:</td>
                            <td><a class="fas fa-plus-square"></a> | @figure.CountSealed | <a class="fas fa-minus-square"></a></td>
                        </tr>                        <tr>
                            <td style="text-align:right">Image:</td>
                            <td> <input for="Name" class="form-control" @bind="@figure.ImgURL" style="font-size:1.5rem" /></td>
                        </tr>
                    </table>
                    <button @onclick="cancel">Cancel</button>
                    }
                    else
                    {
                    <h2 class="card-title">@figure.Name</h2>
                    <table style="font-size:1.5rem">
                        <tr>
                            <td style="text-align:right; width:40%">Number:</td>
                            <td style="width:30%">@figure.Number</td>
                        </tr>
                        <tr>
                            <td style="text-align:right; width:40%">In display:</td>
                            <td style="width:30%">@figure.Displayed</td>
                        </tr>
                        <tr>
                            <td style="text-align:right">Ownd openend:</td>
                            <td>@figure.CountOpened</td>
                        </tr>
                        <tr>
                            <td style="text-align:right">Ownd sealed:</td>
                            <td>@figure.CountSealed</td>
                        </tr>                        <tr>
                            <td style="text-align:right">Image:</td>
                            <td>@figure.ImgURL</td>
                        </tr>
                    </table>
                    }
                    <div style="text-align:right;color:@Color"><a class="fas fa-edit fa-2x" @onclick="() => editfigure(figure.Number)" ></a></div>
                </div>
            </div>
</div>

@code {
    [Parameter]
    public int number { get; set; }
    [Parameter]
    public string serieToShow { get; set; }
    protected MiniFigure Singlefigure = new MiniFigure();
    public string displayButton { get; set; }
    public Series series { get; set; }
    public string Color { get; set; }
    private bool edit = false;
    protected MiniFigure figure = new MiniFigure();
    protected override async Task OnInitializedAsync()
    {
        figure = await Mini.GetOneMiniFigure(serieToShow, number);
        series = await SeriesService.GetOneSerie(serieToShow);
        Color = series.SeriesColor;
        await checkDisplayed(number);
    }

    private async Task editName(int number)
    {
        await Mini.EditFigure(figure.Number, figure, serieToShow);

    }
    private async Task IncrementOpen(int number)
    {

        figure.CountOpened++;

        await editName(number);
    }
    private async Task DecrementOpen(int number)
    {
        if (figure.CountOpened != 0)
        {
            figure.CountOpened--;
        }
        await editName(number);

    }
    private async Task IncrementSealed(int number)
    {
        figure.CountSealed++;
        await editName(number);
    }
    private async Task DecrementSealed(int number)
    {
        if (figure.CountSealed != 0)
        {
            figure.CountSealed--;
        }
        await editName(number);

    }
    private async Task checkDisplayed(int number)
    {
        if (figure.Displayed)
        {
            displayButton = "false";
        }
        else
        {
            displayButton = "true";

        }
        await editName(number);

    }
    private async Task changeDisplayed(int number)
    {
        if (figure.Displayed)
        {
            figure.Displayed = false;
            displayButton = "true";
        }
        else
        {
            figure.Displayed = true;
            displayButton = "false";
        }
        await editName(number);

    }
    private async Task resetfigure(int number)
    {
        figure.Displayed = false;
        figure.CountOpened = 0;
        figure.CountSealed = 0;
        await editName(number);

    }
    private async Task editfigure(int number)
    {
        edit = true;
    }
    protected void cancel()
    {
        edit = false;
    }
}
