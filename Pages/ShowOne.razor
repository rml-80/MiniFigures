@using MiniFigures.Data
@using MiniFigures.Models

@inject IMiniFigureService MiniFigureService
@inject ISeriesService SeriesService
@inject NavigationManager NavigationManager

@if (Serie == null)
{
    <h2>Loading......</h2>
}
else
{
    <div class="cardBig" style="border-color:@Serie.SeriesColor">
        <div class="txtLeft" style="color:@Serie.SeriesColor">@Serie.DisplayName</div>
        <div><img class="imgBig" src="/images/@Serie.Name/@OneMiniFigures.Image" alt="Picture of @OneMiniFigures.Name" /></div>
        <p>@OneMiniFigures.Name</p>
        <table class="cardTabel">
            <tr class="TableOne">
                <td class="label">Number:</td>
                <td>@OneMiniFigures.Number</td>
            </tr>
            <tr class="TableOne">
                <td class="label">In display:</td>
                <td>
                    @if (!OneMiniFigures.Displayed)
                    {
                        <i class="fas fa-times fa-2x" style="color:red" />
                    }
                    else
                    {
                        <i class="fas fa-check fa-2x" style="color:green" />
                    }
                </td>
            </tr>
            <tr class="TableOne">
                <td class="label">Ownd openend:</td>
                <td>@OneMiniFigures.CountOpened</td>
            </tr>
            <tr class="TableOne">
                <td class="label">Ownd sealed:</td>
                <td>@OneMiniFigures.CountSealed</td>
            </tr>
            <tr class="TableOne">
                <td class="label">Image:</td>
                <td>@OneMiniFigures.Image</td>
            </tr>
        </table>
    </div>
}
@code {
    [Parameter]
    public Series Serie { get; set; }
    [Parameter]
    public MiniFigure OneMiniFigures { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        StateHasChanged();
    }
}