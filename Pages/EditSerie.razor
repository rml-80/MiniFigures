@page "/{serieToShow}/edit"
@using MiniFigures.Data
@using MiniFigures.Models
@using MiniFigures.Shared
@inject ISeriesService SeriesService
@inject IMiniFigureService MiniFigureService
@inject NavigationManager NavigationManager
@*<link href="/css/Serie.razor.css" rel="stylesheet"/>*@

@*<Header serie="serie" amountOfFigures="ListOfMF.Count" />*@
<h3>Edit Serie</h3>
<div>
    <div>
        <div class="CardEdit Center" style="border-color:@serie.SeriesColor">
            <div class="row">
                <div class="labelEditSerie">
                    <label for="Number">Number: </label>
                </div>
                <div>
                    <input form="Number" @bind="@serie.Number" />
                </div>
            </div>
            <div class="row">
                <div class="labelEditSerie">
                    <label for="Name">Name: </label>
                </div>
                <div>
                    <input form="Name" @bind="@serie.DisplayName" />
                </div>
            </div>
            <div class="row">
                <div class="labelEditSerie">
                    <label for="NumberOfFiguers">Number of figures: </label>
                </div>
                <div>
                    <input form="NumberOfFigures" @bind="@serie.NumberOfFigures" />
                </div>
            </div>
            <div class="row">
                <div class="labelEditSerie">
                    <label for="SeriePicture">Path to picture: </label>
                </div>
                <div>
                    <input form="SeriePicture" @bind="@serie.SeriePicture" />
                </div>
            </div>
            <div class="row">
                <div class="labelEditSerie">
                    <label for="SeriesColor">Color code: </label>
                </div>
                <div>
                    <input form="SeriesColor" placeholder="@serie.SeriesColor" @onchange="@ColorChange" />
                </div>
            </div>
            <div class="btnRow">
                <input class="btn btn-outline-danger" type="button" @onclick="DeleteShow" value="Delete" />
                <input class="btn btn-outline-dark" type="button" @onclick="cancel" value="Cancel" />
                <input class="btn btn-outline-success" type="button" @onclick="() => saveSerie(serie)" value="Save" />
            </div>
        </div>
        @if (showDelete)
        {
            <div class="modal fade show" style="display:block;background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog" @onclick="@DeleteCancel">
                <div class="modal-dialog" @onclick:stopPropagation="true">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h4>Confirm Delete</h4>
                            <button type="button" class="close" @onclick="@DeleteCancel">&times;</button>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to delete:</p>
                            <h3>@serie.DisplayName</h3>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-outline-dark" @onclick="@DeleteCancel">Cancel</button>
                            <button type="button" class="btn btn-danger" @onclick="() => deleteSerie(serie.Name)">Delete</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {

    [Parameter]
    public string serieToShow { get; set; }

    protected List<MiniFigure> ListOfMF = new List<MiniFigure>();

    protected Series serie = new Series();

    private bool showDelete = false;

    protected override async Task OnInitializedAsync()
    {
        serie = await SeriesService.GetOneSerie(serieToShow);
        ListOfMF = MiniFigureService.GetMiniFigures(serieToShow);

    }
    void saveSerie(Series serie)
    {
        SeriesService.EditSerie(serie.Id, serie);
        SeriesService.RenameCollection(serieToShow, serie.Name);
        NavigationManager.NavigateTo("/", true);
    }
    public void deleteSerie(string name)
    {
        SeriesService.DeleteCollection(name);
        SeriesService.DeleteSerie(name);
        NavigationManager.NavigateTo("/", true);
        showDelete = false;
    }
    //change color on frame when adding color
    void ColorChange(ChangeEventArgs args)
    {
        var Color = (string)args.Value;
        serie.SeriesColor = Color;
    }
    void cancel()
    {
        NavigationManager.NavigateTo($"/{serieToShow}",true);
    }
    public void DeleteShow() => showDelete = true;
    public void DeleteCancel() => showDelete = false;
}
