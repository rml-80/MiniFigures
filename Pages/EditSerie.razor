@page "/{SerieToShow}/edit"

@using MiniFigures.Data
@using MiniFigures.Models
@using MiniFigures.Shared

@inject ISeriesService SeriesService
@inject IMiniFigureService MiniFigureService
@inject NavigationManager NavigationManager

<h3>Edit Serie</h3>
<div>
    <div>
        <div class="CardEdit Center" style="border-color:@Serie.SeriesColor">
            <div class="row">
                <div class="labelEditSerie">
                    <label for="SeriesColor">Color code: </label>
                </div>
                <div>
                    <input form="SeriesColor" placeholder="@Serie.SeriesColor" @onchange="@ColorChange" />
                </div>
            </div>
            <div class="row">
                <div class="labelEditSerie">
                    <label for="ReleaseDate">Release Date: </label>
                </div>
                <div>
                    <input form="ReleaseDate" @bind="@Serie.ReleaseDate" />
                </div>
            </div>
            <div class="row">
                <div class="labelEditSerie">
                    <label for="Number">Number: </label>
                </div>
                <div>
                    <input form="Number" @bind="@Serie.Number" />
                </div>
            </div>
            <div class="row">
                <div class="labelEditSerie">
                    <label for="Name">Name: </label>
                </div>
                <div>
                    <input form="Name" @bind="@Serie.DisplayName" />
                </div>
            </div>
            <div class="row">
                <div class="labelEditSerie">
                    <label for="NumberOfFiguers">Number of figures: </label>
                </div>
                <div>
                    <input form="NumberOfFigures" @bind="@Serie.NumberOfFigures" />
                </div>
            </div>
            <div class="txtCenter">
                    <FilesUpload serie="@Serie.Name" from="editSerie" onSubmit="setImg"/>
                @*<div class="labelEditSerie">
                    <label for="SeriePicture">Picture: </label>
                </div>
                <div>
                    <input form="SeriePicture" @bind="@Serie.SeriePicture" />
                </div>*@
            </div>
            <div class="btnRow">
                <div class="dropdown">
                    <input type="button" class="btn btn-light" value="More" />
                    <div class="dropdown-content">
                        <div class="btn-group-vertical" >
                            <input class="btn btn-outline-dark" style="border:solid 0.5px grey" type="button" @onclick='() => NavigationManager.NavigateTo($"/addnew/figures/{Serie.Name}")' value="Edit all Figures" />
                            <input class="btn btn-outline-warning"style="border:solid 0.5px grey" type="button" @onclick="ResetAllFigures" value="Reset all Figures" />
                            <input class="btn btn-outline-danger"style="border:solid 0.5px grey" type="button" @onclick="DeleteShow" value="Delete Serie" />
                        </div>
                    </div>
                </div>
                <input class="btn btn-outline-dark" type="button" @onclick="cancel" value="Cancel" />
                <input class="btn btn-outline-success" type="button" @onclick="() => saveSerie(Serie)" value="Save" />
            </div>
        </div>
        @if (ShowDelete)
        {
            <div class="modal fade show" style="display:block;background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog" @onclick="@DeleteCancel">
                <div class="modal-dialog" @onclick:stopPropagation="true">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h4>Confirm Delete</h4>
                            <button type="button" class="close" @onclick="@DeleteCancel">&times;</button>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to delete:</p>
                            <h3>@Serie.DisplayName</h3>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-outline-dark" @onclick="@DeleteCancel">Cancel</button>
                            <button type="button" class="btn btn-danger" @onclick="@deleteSerie">Delete</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public string SerieToShow { get; set; }

    private bool ShowDelete = false;

    private List<MiniFigure> ListOfMiniFigures = new List<MiniFigure>();

    private Series Serie = new Series();

    protected override async Task OnInitializedAsync()
    {
        Serie = await SeriesService.GetOneSerie(SerieToShow);
        ListOfMiniFigures = MiniFigureService.GetMiniFigures(SerieToShow);
    }

    void setImg(string Message)
    {
        Serie.BagImage = Message;
    }

    private void saveSerie(Series Serie)
    {

        SeriesService.EditSerie(Serie.Id, Serie);
        SeriesService.RenameCollection(SerieToShow, Serie.Name);
        NavigationManager.NavigateTo("/", true);
    }

    private void deleteSerie()
    {
        NavigationManager.NavigateTo($"/delete/{SerieToShow}");
    }

    //change color on frame when adding color
    private void ColorChange(ChangeEventArgs args)
    {
        var Color = (string)args.Value;
        Serie.SeriesColor = Color;
    }

    private void cancel() => NavigationManager.NavigateTo($"/{SerieToShow}", true);

    private void DeleteShow() => ShowDelete = true;

    private void DeleteCancel() => ShowDelete = false;

    private void ResetAllFigures()
    {
        foreach (var item in ListOfMiniFigures)
        {
            item.Displayed = false;
            item.CountSealed = 0;
            item.CountOpened = 0;
            MiniFigureService.EditFigure(item.ID, item, SerieToShow);
        }
        NavigationManager.NavigateTo($"/{SerieToShow}", true);
    }
}