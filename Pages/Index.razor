@page "/"

@using MiniFigures.Models
@using MiniFigures.Data
@inject ISeriesService SeriesService
@inject IMiniFigureService MiniFigureService
@inject NavigationManager NavigationManager
<link rel="stylesheet" href="/css/Index.css" />

<div class="row" style="border-radius:15px; margin-left:auto; margin-right:auto ">
    <div style="text-align:center;margin-left:auto; margin-right:auto">
        <h5>There is @NumberOfSeries Series to Collect | You have @CompleteSeries complete series</h5>
        <h5>With a total of @TotalFigures figures | You have @TotalFiguresOwned figures </h5>
    </div>
</div>

<div class="card-deck">
    @foreach (var item in ListOfSeries)
    {
        <div class="figCard" style="border-color: @item.SeriesColor; background-color:@item.SeriesColor">
            <img class="indexImg" src="images/@item.Name/@item.SeriePicture" @onclick="() => goTo(item.Name)" alt="@item.Name" />
        </div>
    }
</div>
@code {
    List<Series> ListOfSeries = new List<Series>();
    public int NumberOfSeries { get; set; }
    public int CompleteSeries { get; set; }
    public int TotalFigures { get; set; }
    public int TotalFiguresOwned { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ListOfSeries = await SeriesService.GetSeries();

        GetInfo();
    }
    private void goTo(string serie)
    {
        NavigationManager.NavigateTo($"/{serie}");
    }
    private void GetInfo()
    {
        NumberOfSeries = ListOfSeries.Count();
        foreach (var serie in ListOfSeries)
        {
            TotalFigures += serie.NumberOfFigures;
            if (serie.isComplete)
            {
                CompleteSeries++;
            }
            List<MiniFigure> series = MiniFigureService.GetMiniFigures(serie.Name).ToList();
            foreach (var figure in series)
            {
                TotalFiguresOwned += figure.CountSealed;
            }

        }


    }
}