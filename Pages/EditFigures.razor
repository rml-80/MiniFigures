@page "/addnew/figures/{serie}"

@using MiniFigures.Data
@using MiniFigures.Models
@using System.IO
@using Microsoft.AspNetCore.Hosting

@inject IWebHostEnvironment env
@inject IMiniFigureService MiniFigureService
@inject ISeriesService SeriesService
@inject NavigationManager NavigationManager

<style>
    img {
        display: inline;
        max-width: 100%;
        height: 57%;
    }
    .marginBig {
        margin-top: 3rem;
        margin-bottom: 3rem;
    }
    .txtRight {
        text-align: right;
    }
    .Card {
        text-align: center;
        width: 15rem;
        height: 26rem;
        border: solid 0.6rem;
        border-radius: 1rem;
        margin: 0.5rem;
        padding: 0.5rem 0.6rem 0.5rem 0.6rem;
    }
    .card-deck {
        justify-content: center;
    }
    .txtLeftBold {
        text-align: left;
        font-weight: bolder;
    }
    .txtCenter {
        text-align: center;
    }
</style>

@if (ListOfMF == null)
{
    <Loading />
}
else
{
    <div class="marginBig, txtRight" style="float:right">
        <input class="btn btn-outline-success" type="submit" @onclick="done" value="Done" />
    </div>
    <h3>Edit Figures</h3>
    <FilesUpload serie="@serie" />
    <div class="card-deck">
        @foreach (var figure in ListOfMF)
        {
            <div class="Card" style="border-color:@Color">
                <div class="txtLeftBold" style="color:@Serie.SeriesColor">@figure.Number</div>
                <label for="Name">Enter name: </label>
                <input tabindex="1" form="Name" class="txtCenter" @onchange="@EditNewFigureName" />
                @if (!File.Exists($"{env.WebRootPath}\\images\\Series\\{serie}\\{figure.Image}"))
                {
                    <img src="/images/placeholder.jpg" alt="Picture of placeholder picture" style="margin-top:2rem" />
                }
                else
                {
                    <img src="/images/Series/@serie/@figure.Image" alt="Picture of @figure.Name" style="margin-top:2rem" />
                }
            </div>
        }
    </div>
}

@*Redo to check name instead*@

@*<div style="display:@ShowWarningForNumber; color:red">
        <h4>Minifigure with Number: @OneMiniFigure.Number <br />already exists!</h4>
    </div>*@
@code {
    [Parameter] public string serie { get; set; }

    private int i = 1;
    private MiniFigure OneMiniFigure = new MiniFigure();
    private Series Serie = new Series();

    private List<Series> SeriesList = new List<Series>();
    private List<MiniFigure> ListOfMF = new List<MiniFigure>();

    private string Color { get; set; } = "lightgrey";
    private string FigureNumber { get; set; }

    //TODO: Not in use right now!
    //protected string ShowWarningForNumber { get; set; } = "none";

    protected override async Task OnInitializedAsync()
    {
        Serie = await SeriesService.GetOneSerie(serie);
        Color = Serie.SeriesColor;
        SeriesList = await SeriesService.GetSeries("A-Z");
        ListOfMF = MiniFigureService.GetMiniFigures(serie);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Serie = await SeriesService.GetOneSerie(serie);
        ListOfMF = MiniFigureService.GetMiniFigures(serie);
        StateHasChanged();
    }

    private async Task EditNewFigureName(ChangeEventArgs args)
    {
        OneMiniFigure = await MiniFigureService.GetOneMiniFigure(serie, i);

        OneMiniFigure.Name = args.Value.ToString();

        await MiniFigureService.EditFigure(OneMiniFigure.ID, OneMiniFigure, serie);
        i++;
    }

    protected void done() => NavigationManager.NavigateTo($"/{serie}", true);
}