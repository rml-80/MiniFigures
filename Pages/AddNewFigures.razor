@page "/addnew/figures/{serie}"

@using MiniFigures.Data
@using MiniFigures.Models

@inject IMiniFigureService MiniFigureService
@inject ISeriesService SeriesService
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="css/card-vertical-small.css">

@if (MF.Count == series.NumberOfFigures)
{
    <h3>No more figures to add</h3>
}
else
{
    <h3>Add Figure</h3>
    <div class="card-deck">
        <div class="ownCard" style="border-color:@Color">
            <div class="topMargin2">Figures To add: @(series.NumberOfFigures - MF.Count) </div>
            <select @onchange="@SerieClicked">
                <option value="@collectionName">@collectionName</option>
                @foreach (var serie in SerieList)
                {
                    <option value="@serie.Name">@serie.Name</option>
                }
            </select>
            <label for="Number">Number: </label>
            <input tabindex="1" form="Number" class="txtCenter" @onchange="isExist" />
            <label for="Name">Name: </label>
            <input tabindex="2" form="Name" class="txtCenter" @bind="@miniFigure.Name" />
            <div class="marginBig">
                <input type="button" @onclick="cancel" value="Cancel" />
                <input tabindex="3" type="button" @onclick="@AddNewFigure" value="Save" />

            </div>
        </div>
    </div>
        <div style="display:@ShowWarningForNumber; color:red">
            <h4>Minifigure with Number: @miniFigure.Number <br />already exists!</h4>
        </div>
}
@code {
    [Parameter]
    public string serie { get; set; }
    MiniFigure miniFigure = new MiniFigure();
    Series series = new Series();
    string collectionName;
    public string Color { get; set; } = "lightgrey";
    List<Series> SerieList = new List<Series>();
    List<MiniFigure> MF = new List<MiniFigure>();
    public bool Existing { get; set; }
    public string Pic { get; set; }
    public string ShowWarningForNumber { get; set; } = "none";

    protected override async Task OnInitializedAsync()
    {
        series = await SeriesService.GetOneSerie(serie);
        Color = series.SeriesColor;
        collectionName = serie;
        SerieList = await SeriesService.GetSeries();
        MF = MiniFigureService.GetMiniFigures(collectionName);
    }
    protected async Task AddNewFigure()
    {
        if (Existing)
        {
            ShowWarningForNumber = "inline";
        }
        else
        {
            Pic = miniFigure.Number.ToString();
            if (Pic.Length > 1)
            {
                miniFigure.Image = $"{series.Number}-{Pic}.jpg";
            }
            else
            {
                miniFigure.Image = $"{series.Number}-0{Pic}.jpg";
            }
            miniFigure.CountOpened = 0;
            miniFigure.CountSealed = 0;
            miniFigure.Displayed = false;

            await MiniFigureService.AddFigure(miniFigure, collectionName);
            //NavigationManager.NavigateTo($"/{collectionName}", true);
            NavigationManager.NavigateTo($"/addnew/figures/{serie}", true);
        }
    }
    protected void SerieClicked(ChangeEventArgs args)
    {
        collectionName = (string)args.Value;
    }
    void isExist(ChangeEventArgs args)
    {
        foreach (var figure in MF)
        {
            if (figure.Number == Convert.ToInt32(args.Value))
            {
                Existing = true;
                break;
            }
        }
        miniFigure.Number = Convert.ToInt32(args.Value);
    }
    void cancel()
    {
        NavigationManager.NavigateTo($"/{collectionName}");
    }
}
