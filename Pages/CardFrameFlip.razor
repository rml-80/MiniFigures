@page "/{SerieToShow}/{Number:int}"

@using MiniFigures.Data
@using MiniFigures.Models

@inject IMiniFigureService MiniFigureService
@inject ISeriesService SeriesService
@inject NavigationManager NavigationManager

@if (Serie == null)
{
    <h2>Loading......</h2>
}
else
{
    <table>
        <tr>
            <td class="txtRight" style="color:@Serie.SeriesColor">
                @if (OneMiniFigures.Number <= 1 || (Edit))
                {
                    <a class="fas fa-chevron-left fa-5x" style="opacity:0.3" />
                }
                else
                {
                    <a class="fas fa-chevron-left fa-5x" @onclick="() => goTo(OneMiniFigures.Number - 1)" />
                }
            </td>
            <td>
                <div class="flip-card">
                    <div class="flip-card-inner">
                        <div class="flip-card-front">
                            <ShowOne OneMiniFigures="@OneMiniFigures" Serie="@Serie" />
                        </div>
                        <div class="flip-card-back">
                            <EditOne OneMiniFigures="@OneMiniFigures" Serie="@Serie" />
                        </div>
                    </div>
                </div>
            </td>
            <td class="txtLeft" style="color: @Serie.SeriesColor">
                @if (OneMiniFigures.Number == ListOfMiniFigures.Count || (Edit))
                {
                    <a class="fas fa-chevron-right fa-5x" style="opacity:0.3" />
                }
                else
                {
                    <a class="fas fa-chevron-right fa-5x" @onclick="() => goTo(OneMiniFigures.Number + 1)" />
                }
            </td>
        </tr>
    </table>
}
@code {
    [Parameter]
    public int Number { get; set; }
    [Parameter]
    public string SerieToShow { get; set; }

    List<MiniFigure> ListOfMiniFigures = new List<MiniFigure>();

    public ShowSerie showSerie = new ShowSerie();

    protected MiniFigure OneMiniFigures = new MiniFigure();
    protected Series Serie { get; set; }
    
    public bool Edit { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        Serie = await SeriesService.GetOneSerie(SerieToShow);
        ListOfMiniFigures = MiniFigureService.GetMiniFigures(SerieToShow);
    }
    protected override async Task OnParametersSetAsync()
    {
        OneMiniFigures = await MiniFigureService.GetOneMiniFigure(SerieToShow, Number);
    }
    public void editfigure()
    {
        Edit = true;
    }
    public async Task goTo(int i)
    {
        Number = i;
        OneMiniFigures = await MiniFigureService.GetOneMiniFigure(SerieToShow, Number);
        this.StateHasChanged();
    }
    void close()
    {
        showSerie.HideCard();
        NavigationManager.NavigateTo($"/{SerieToShow}", true);
    }
}