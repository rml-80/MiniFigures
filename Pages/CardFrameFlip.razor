@*@page "/{serieToShow}/{number:int}"*@
@using MiniFigures.Data
@using MiniFigures.Models
@inject NavigationManager NavigationManager
@inject IMiniFigureService MiniFigureService
@inject ISeriesService SeriesService

@if (serie == null)
{
    <h2>Loading......</h2>
}
else
{
    <table>
        <tr>
            <td class="txtRight" style="color:@serie.SeriesColor">
                @if (OneMF.Number <= 1 || (edit))
                {
                    <a class="fas fa-chevron-left fa-5x" style="opacity:0.3" />
                }
                else
                {
                    <a class="fas fa-chevron-left fa-5x" @onclick="() => goTo(OneMF.Number - 1)" />
                }
            </td>
            <td>
                <div class="flip-card">
                    <div class="flip-card-inner">
                        <div class="flip-card-front">
                            <ShowOne OneMF="@OneMF" serie="@serie" />
                        </div>
                        <div class="flip-card-back">
                            <EditOne OneFigure="@OneMF" serie="@serie" />
                        </div>
                    </div>
                </div>
            </td>
            <td class="txtLeft" style="color: @serie.SeriesColor">
                @if (OneMF.Number == ListOfMF.Count || (edit))
                {
                    <a class="fas fa-chevron-right fa-5x" style="opacity:0.3" />
                }
                else
                {
                    <a class="fas fa-chevron-right fa-5x" @onclick="() => goTo(OneMF.Number + 1)" />
                }
            </td>
        </tr>
    </table>
}
@code {
    [Parameter]
    public int number { get; set; }
    [Parameter]
    public string serieToShow { get; set; }

    protected Series serie { get; set; }
    protected MiniFigure OneMF = new MiniFigure();

    List<MiniFigure> ListOfMF = new List<MiniFigure>();

    public bool edit { get; set; } = false;

    public ShowSerie ss = new ShowSerie();

    protected override async Task OnInitializedAsync()
    {
        serie = await SeriesService.GetOneSerie(serieToShow);
        ListOfMF = MiniFigureService.GetMiniFigures(serieToShow);
    }
    protected override async Task OnParametersSetAsync()
    {
        OneMF = await MiniFigureService.GetOneMiniFigure(serieToShow, number);
    }
    public void editfigure()
    {
        edit = true;
    }
    public async Task goTo(int i)
    {
        number = i;
        OneMF = await MiniFigureService.GetOneMiniFigure(serieToShow, number);
        this.StateHasChanged();
    }
    void close()
    {
        ss.HideCard();
        NavigationManager.NavigateTo($"/{serieToShow}", true);
    }
}