@page "/"

@using MiniFigures.Data
@using MiniFigures.Models
@using MiniFigures.Shared

@inject ISeriesService SeriesService
@inject IMiniFigureService MiniFigureService
@inject NavigationManager NavigationManager

<style>
    .indexImg {
        height: 100%;
    }

    .txtRight {
        text-align: right;
    }

    .txtLeft {
        text-align: left;
    }

    .headerInfo {
        font-size: large;
        width: 40%;
        margin: auto;
    }

    .headerCenterStart {
        text-align: center;
        padding: 1.5rem ;
        border-radius: 2rem;
        margin-bottom: 1.5rem;
        border: solid 1px black;
    }

    .infoBlock {
        border: solid 0.6rem;
        width: 98%;
        margin: -2rem auto 1rem auto;
        border-bottom-left-radius: 1.5rem;
        border-bottom-right-radius: 1.5rem;
    }

    .SerieInfobutton {
        float: right;
        margin-right: 2rem;
    }

    .infoRow {
        width: 12rem;
        text-align: right;
    }

    .biggerText {
        font-size: 1.25rem;
    }

    .headerCenter {
        text-align: center;
        height: auto;
        padding-top: 1.5rem;
        border-radius: 2rem;
        margin-bottom: 1.5rem;
    }

    .card-deck {
        text-align: center;
    }

    .bagCard {
        width: 15rem;
        height: 15rem;
        margin: 2rem 2rem 4rem 2rem;
    }
</style>

<div class="headerCenterStart" >
    <h1>My MiniFigure Collection</h1>
    <table class="headerInfo">
        <tr>
            <td>Series to Collect: @NumberOfSeries</td>
            <td>Total number of figures: @TotalFigures</td>
        </tr>
        <tr>
            <td>You own: @CompleteSeries competed series</td>
            <td>You have: @TotalFiguresOwned figures</td>
        </tr>
    </table>
</div>

<div class="card-deck">
    @foreach (var item in ListOfSeries)
    {
        <div class="bagCard">
            <img class="indexImg" src="images/series/@item.Name/Bag.jpg" @onclick="() => goTo(item.Name)" alt="@item.Name" />
            <h5>@item.DisplayName</h5>
            <h6 style="margin-top:0.7rem">
                @CountOwned(item.Name) of @item.NumberOfFigures figures
                @if (CountOwned(item.Name) == item.NumberOfFigures)
                {
                    <i class="fas fa-star" style="color:@item.SeriesColor" />
                }
            </h6>
        </div>
    }
</div>
@code {
    private List<Series> ListOfSeries = new List<Series>();
    private List<MiniFigure> ListOfFigures = new List<MiniFigure>();

    private int CompleteSeries { get; set; }
    private int NumberOfSeries { get; set; }
    private int TotalFigures { get; set; }
    private int TotalFiguresOwned { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetList();
        GetInfo();
    }
    // Needed for ordering cards when changing order by
    protected override void OnAfterRender(bool firstRender)
    {
        GetList().GetAwaiter();
        StateHasChanged();
    }

    private async Task<List<Series>> GetList()
    {
        return ListOfSeries = await SeriesService.GetSeries(NavMenu.orderByString);
    }

    private void goTo(string serie) => NavigationManager.NavigateTo($"/{serie}");

    private void GetInfo()
    {
        NumberOfSeries = ListOfSeries.Count();
        foreach (var serie in ListOfSeries)
        {
            TotalFigures += serie.NumberOfFigures;
            if (serie.isComplete)
            {
                CompleteSeries++;
            }
        }
        GetOwned();
    }

    private void GetOwned()
    {
        TotalFiguresOwned = 0;
        foreach (var serie in ListOfSeries)
        {
            ListOfFigures = MiniFigureService.GetMiniFigures(serie.Name).ToList();
            foreach (var figure in ListOfFigures)
            {
                if (figure.CountSealed > 0 || figure.CountOpened > 0)
                {
                    TotalFiguresOwned++;
                }
            }
        }
    }

    private int CountOwned(string name)
    {
        var i = 0;
        ListOfFigures = MiniFigureService.GetMiniFigures(name).ToList();
        foreach (var figure in ListOfFigures)
        {
            if (figure.CountSealed > 0 || figure.CountOpened > 0)
            {
                i++;
            }
        }
        return i;
    }
}