@page "/"

@using MiniFigures.Data
@using MiniFigures.Models
@using MiniFigures.Shared

@inject ISeriesService SeriesService
@inject IMiniFigureService MiniFigureService
@inject NavigationManager NavigationManager

<div class="headerCenterStart" style="border:2px solid black; height:8rem">
        <h1>My MiniFigure Collection</h1>
    <table class="headerInfo">
            <tr>
                <td class="txtRight">Series to Collect:</td>
                <td class="txtLeft">@NumberOfSeries</td>
                <td class="txtRight">Total number of figures:</td>
                <td class="txtLeft">@TotalFigures</td>
                <td class="txtRight">You own: </td>
                <td class="txtLeft">@CompleteSeries competed series</td>
                <td class="txtRight">You have:</td>
                <td class="txtLeft">@TotalFiguresOwned figures</td>
            </tr>
        </table>
</div>

<div class="card-deck">
    @foreach (var item in ListOfSeries)
    {
    <div class="figCard" >
        <img class="indexImg" src="images/series/@item.Name/Bag.jpg" @onclick="() => goTo(item.Name)" alt="@item.Name" />
        <h5>@item.DisplayName</h5>
        <h6 style="margin-top:0.7rem">
            @CountOwned(item.Name) of @item.NumberOfFigures figures 
            @if (CountOwned(item.Name) == item.NumberOfFigures)
            {
                <i class="fas fa-star" style="color:@item.SeriesColor" />
            }
        </h6>
    </div>
    }
</div>
@code {
    private List<Series> ListOfSeries = new List<Series>();
    private List<MiniFigure> ListOfFigures = new List<MiniFigure>();

    private int CompleteSeries { get; set; }
    private int NumberOfSeries { get; set; }
    private int TotalFigures { get; set; }
    private int TotalFiguresOwned { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetList();
        GetInfo();
    }
    // Needed for ordering cards when changing order by
    protected override void OnAfterRender(bool firstRender)
    {
        GetList().GetAwaiter();
        StateHasChanged();
    }

    private async Task<List<Series>> GetList()
    {
        return ListOfSeries = await SeriesService.GetSeries(NavMenu.orderByString);
    }

    private void goTo(string serie) => NavigationManager.NavigateTo($"/{serie}");

    private void GetInfo()
    {
        NumberOfSeries = ListOfSeries.Count();
        foreach (var serie in ListOfSeries)
        {
            TotalFigures += serie.NumberOfFigures;
            if (serie.isComplete)
            {
                CompleteSeries++;
            }
        }
        GetOwned();
    }

    private void GetOwned()
    {
        TotalFiguresOwned = 0;
        foreach (var serie in ListOfSeries)
        {
            ListOfFigures = MiniFigureService.GetMiniFigures(serie.Name).ToList();
            foreach (var figure in ListOfFigures)
            {
                if (figure.CountSealed > 0 || figure.CountOpened > 0)
                {
                    TotalFiguresOwned++;
                }
            }
        }
    }

    private int CountOwned(string name)
    {
        var i = 0;
        ListOfFigures = MiniFigureService.GetMiniFigures(name).ToList();
        foreach (var figure in ListOfFigures)
        {
            if (figure.CountSealed > 0 || figure.CountOpened > 0)
            {
                i++;
            }
        }
        return i;
    }
}