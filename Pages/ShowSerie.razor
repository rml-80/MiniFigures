@page "/{serieToShow}"
@using MiniFigures.Models
@using MiniFigures.Data
@inject IMiniFigureService Mini
@inject ISeriesService SeriesService
@inject NavigationManager NavigationManager

<div class="row" style="text-align:center; background-color:@Color; border-radius:15px;height:4rem; padding-top:inherit; margin-left:auto; margin-right:auto ">
    <div style="width:5%">
    </div>
    <div style="width:90%">
        <h3 >@serieToShow.Replace("_", " ") </h3>
    </div>
    <div style="width:5%;text-align:center">
        <a @onclick="() => ToggleInfo()"><i class="@InfoIcon"></i></a>
    </div>
</div>

@if (MF == null)
{
    <h4>Loading.......</h4>
}
else if (MF.Count == 0)
{
    <br />
    <div style="text-align:center"><h4>No Figures in collection</h4></div>
    <br />
    <div style="text-align:center">
        <input type="button" value="Add Figure" @onclick="ToAdd" /> <input type="button" value="Edit serie" @onclick="ToEdit" />
    </div>
}
else
{
    <div style="display:@HideShow; font-size:1.25rem">
        <div style="margin: -5px auto 0px auto;padding:10px ;width: 98%; border:solid 4px @Color; border-bottom-left-radius:10px;border-bottom-right-radius:10px">
            <table style="width:100%; ">
                <tr>
                    <td style="width:10%">Number:</td>
                    <td style="width:12rem">@series.Number</td>
                    <td style="text-align:right"><input type="button" @onclick="ToEdit" value="Edit" /></td>
                </tr>
                <tr>
                    <td>Number of figures:</td>
                    <td>@series.NumberOfFigures</td>
                    <td style="text-align:right">
                        @if (MF.Count != series.NumberOfFigures)
                        {
                        <p style="margin:0">@MF.Count of @series.NumberOfFigures are added to the serie <input type="button" @onclick="ToAdd" value="Add figure" /></p>
                        }
                    </td>
                </tr>
                <tr>
                    <td>Series color:</td>
                    <td>@series.SeriesColor</td>
                    <td></td>
                </tr>
            </table>
        </div>
    </div>
    <h4 style="margin-top:10px">
        You own @owned of @series.NumberOfFigures
        @if (owned == series.NumberOfFigures)
        {
            <i class="fas fa-star" style="color:@series.SeriesColor" />
        }
    </h4>
    <div class="card-deck"style="justify-content:center">
        @foreach (var figure in MF)
        {
                <div class="card-body" style="text-align: center;min-width:16rem;max-width: 16rem; height: 26rem; border-radius: 1rem; padding-top:10px;border: @Color solid 1rem;margin:1rem">
                    <div style="text-align:left;font-weight:bolder;color:@Color">@figure.Number</div>
                    <img src="/images/@serieToShow/@figure.Image" style="max-width: 100%; height: 60%" alt="Picture of @figure.Name" @onclick="(() => IncrementMF(figure.Number))" />
                    <h5 class="card-title">@figure.Name</h5>
                    <table style="margin-bottom:10px; line-height:1">
                        <tr>
                            <td style="text-align:right; width:70%">In display:</td>
                            <td style="width:30%"><i class=@changeIcon(figure.Displayed) style=@iconColor></i></td>
                        </tr>
                        <tr>
                            <td style="text-align:right">Ownd openend:</td>
                            <td>@figure.CountOpened</td>
                        </tr>
                        <tr>
                            <td style="text-align:right">Ownd sealed:</td>
                            <td>@figure.CountSealed</td>
                        </tr>
                    </table>
                    <div style="text-align:right;color:@Color"><a class="fas fa-info-circle fa-2x" @onclick="(() => ShowOne(figure.Number))"></a></div>
                </div>
        }
    </div>
}
@code {
    [Parameter]
    public string serieToShow { get; set; }
    List<MiniFigure> MF;
    public int number { get; set; }
    protected MiniFigure SingleMF = new MiniFigure();
    public Series series { get; set; }
    public string Color { get; set; }
    public string Icon { get; set; }
    public string iconColor { get; set; }
    public int owned { get; set; }
    public string HideShow { get; set; } = "none";
    public string InfoIcon { get; set; } = "fas fa-chevron-down fa-2x";

    protected override async Task OnInitializedAsync()
    {
        series = await SeriesService.GetOneSerie(serieToShow);
    }

    protected override async Task OnParametersSetAsync()
    {
        await SendCollectionName(serieToShow);
        series = await SeriesService.GetOneSerie(serieToShow);
        Color = series.SeriesColor;
        Owned();
        HideShow = "none";
        InfoIcon = "fas fa-chevron-down fa-2x";
    }
    public async Task SendCollectionName(string collectionName)
    {
        MF = Mini.GetMiniFigures(collectionName);
    }
    private void ShowOne(int number)
    {
        NavigationManager.NavigateTo($"/{serieToShow}/{number}");
    }

    private async Task IncrementMF(int number)
    {
        SingleMF = await Mini.GetOneMiniFigure(serieToShow, number);
        if (SingleMF.CountSealed == 0 && SingleMF.CountOpened == 0 || SingleMF.Displayed == true)
        {
            SingleMF.CountSealed++;
            owned++;
        }
        else if (SingleMF.CountSealed == 1 && SingleMF.CountOpened == 0)
        {
            SingleMF.CountSealed = 0;
            SingleMF.CountOpened++;
        }
        else if (SingleMF.CountOpened == 1)
        {
            SingleMF.Displayed = true;
        }

        await Mini.EditFigure(SingleMF.ID, SingleMF, serieToShow);
        await SendCollectionName(serieToShow);
    }
    private void Owned()
    {
        owned = 0;
        foreach (var figure in MF)
        {
            if (figure.CountSealed > 0 || figure.CountOpened > 0)
            {
                owned++;
            }
        }
    }
    private string changeIcon(bool test)
    {
        if (test)
        {
            Icon = "fas fa-check";
            iconColor = "color:green";
        }
        else
        {
            Icon = "fas fa-times";
            iconColor = "color:red";
        }
        return Icon;
    }

    void ToEdit()
    {
        NavigationManager.NavigateTo($"/{serieToShow}/edit");
    }
    void ToAdd()
    {
        NavigationManager.NavigateTo($"/addnew/figures/{serieToShow}");
    }
    void ToggleInfo()
    {
        if (HideShow == "none")
        {
            HideShow = "inline";
            InfoIcon = "fas fa-chevron-up fa-2x";
        }
        else
        {
            HideShow = "none";
            InfoIcon = "fas fa-chevron-down fa-2x";
        }
    }

}
