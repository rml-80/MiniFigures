@page "/{SerieToShow}"

@using MiniFigures.Data
@using MiniFigures.Models
@using System.IO
@using Microsoft.AspNetCore.Hosting

@inject IWebHostEnvironment env
@inject IMiniFigureService MiniFigureService
@inject ISeriesService SeriesService
@inject NavigationManager NavigationManager

@if (ListOfMiniFigures == null)
{
    <Loading />
}
else if (ListOfMiniFigures.Count == 0)
{
    <Header series="Serie" ListOfMiniFigures="ListOfMiniFigures" />
    <div class="headerCenter">
        <h4 class="marginBig">No Figures in collection</h4>
        <input type="button" value="Add Figure" @onclick="ToAdd" /> <input type="button" value="Edit serie" @onclick="ToEdit" />
    </div>
}
else
{
    <Header series="Serie" ListOfMiniFigures="ListOfMiniFigures" />

    <h4>
        You own @Owned of @Serie.NumberOfFigures
        @if (Owned == Serie.NumberOfFigures)
        {
            <i class="fas fa-star" style="color:@Serie.SeriesColor" />
        }
    </h4>
    <div class="card-deck">
        @foreach (var figure in ListOfMiniFigures)
        {
            <div class="Card" style="border-color:@Serie.SeriesColor">
                <div style="height:22rem">
                    <div class="txtLeftBold" style="color:@Serie.SeriesColor">@figure.Number</div>
                    @if (!File.Exists($"{env.WebRootPath}\\images\\Series\\{SerieToShow}\\{figure.Image}"))
                    {
                        <img src="/images/placeholder.jpg" alt="Picture" @onclick="(() => showCard(figure.Number))" />

                    }
                    else
                    {
                        <img src="/images/Series/@SerieToShow/@figure.Image" alt="Picture of @figure.Name" @onclick="(() => showCard(figure.Number))" />
                    }
                    <table>
                        <tr>
                            <td colspan="3">
                                <h5>@figure.Name</h5>
                            </td>
                        </tr>
                        <tr>
                            <td class="labelSmall">In display:</td>
                            <td>
                                @if (!figure.Displayed)
                                {
                                    <i class="fas fa-times" style="color:red" />
                                }
                                else
                                {
                                    <i class="fas fa-check" style="color:green" />
                                }
                            </td>
                            <td></td>
                        </tr>
                        <tr>
                            <td class="labelSmall">Ownd openend:</td>
                            <td>@figure.CountOpened</td>
                            <td class="fas fa-plus-circle infoBtn" style="        color: @Serie.SeriesColor; margin-top:0.2rem;" @onclick="() => add(1,figure.Number)"></td>
                        </tr>
                        <tr>
                            <td class="labelSmall">Ownd sealed:</td>
                            <td>@figure.CountSealed</td>
                            <td class="fas fa-plus-circle infoBtn" style="color:@Serie.SeriesColor; margin-top:0.2rem" @onclick="() => add(2,figure.Number)"></td>
                        </tr>
                    </table>
                </div>
                <a class="fas fa-plus-circle fa-2x infoBtn" style="color:@Serie.SeriesColor" @onclick="(() => IncrementListOfMF(figure.Number))" />
            </div>
        }
        @if (ShowCard)
        {
            <div class="modal fade show" style="display:block;background-color: rgba(255,255,255,.8);" aria-modal="true" role="dialog" @onclick="HideCard">
                <i class="fas fa-times fa-2x closeBtn" @onclick="HideCard" />
                <div class="modal-dialog" @onclick:stopPropagation="true">
                    <div class="modal-content" style="background-color:transparent; border:none">
                        <Card SerieToShow="@SerieToShow" Number="@NumberToShow" />
                    </div>
                </div>
            </div>
        }
    </div>
    <NavBarSerie SerieToShow="@SerieToShow" SerieColor="@Serie.SeriesColor" />
}
@code {
    [Parameter] public string SerieToShow { get; set; }

    private List<MiniFigure> ListOfMiniFigures;

    private MiniFigure OneMiniFigures = new MiniFigure();
    private Series Serie { get; set; }

    protected bool ShowCard = false;
    private int Owned { get; set; }
    protected int NumberToShow { get; set; }

    protected override async Task OnInitializedAsync() => Serie = await SeriesService.GetOneSerie(SerieToShow);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await GetSerie();
        GetFigures(SerieToShow);
        GetOwned();
        StateHasChanged();
    }

    private async Task GetSerie() => Serie = await SeriesService.GetOneSerie(SerieToShow);

    private void GetFigures(string collectionName) => ListOfMiniFigures = MiniFigureService.GetMiniFigures(collectionName);

    private void showCard(int number)
    {
        NumberToShow = number;
        ShowCard = true;
    }

    //Called from Card needs to be public
    public void HideCard() => ShowCard = false;

    private async Task IncrementListOfMF(int number)
    {
        OneMiniFigures = await MiniFigureService.GetOneMiniFigure(SerieToShow, number);
        if (OneMiniFigures.CountSealed == 0 && OneMiniFigures.CountOpened == 0 || OneMiniFigures.Displayed == true)
        {
            if (OneMiniFigures.CountSealed == 1 && OneMiniFigures.CountOpened != 1)
            {
                Owned++;
            }
            OneMiniFigures.CountSealed++;
        }
        else if (OneMiniFigures.CountSealed == 1 && OneMiniFigures.CountOpened == 0)
        {
            OneMiniFigures.CountSealed = 0;
            OneMiniFigures.CountOpened++;
        }
        else if (OneMiniFigures.CountOpened == 1)
        {
            OneMiniFigures.Displayed = true;
        }
        await MiniFigureService.EditFigure(OneMiniFigures.ID, OneMiniFigures, SerieToShow);
        GetFigures(SerieToShow);
    }

    private void GetOwned()
    {
        Owned = 0;
        foreach (var figure in ListOfMiniFigures)
        {
            if (figure.CountSealed > 0 || figure.CountOpened > 0)
            {
                Owned++;
            }
        }
        if (Owned == Serie.NumberOfFigures)
        {
            Serie.isComplete = true;
        }
        else
        {
            Serie.isComplete = false;
        }
        SeriesService.EditSerie(Serie.Id, Serie);
    }

    private void ToEdit() => NavigationManager.NavigateTo($"/{SerieToShow}/edit");

    private void ToAdd() => NavigationManager.NavigateTo($"/addnew/figures/{SerieToShow}");

    private async Task add(int i, int number)
    {
        OneMiniFigures = await MiniFigureService.GetOneMiniFigure(SerieToShow, number);
        switch (i)
        {
            case 1:
                OneMiniFigures.CountOpened++;
                ShowCard = false;
                break;
            case 2:
                OneMiniFigures.CountSealed++;
                ShowCard = false;
                break;
            default:
                break;
        }
        await MiniFigureService.EditFigure(OneMiniFigures.ID, OneMiniFigures, SerieToShow);
    }
}