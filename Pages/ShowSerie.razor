@page "/{serieToShow}"
@using MiniFigures.Models
@using MiniFigures.Data
@inject IMiniFigureService Mini
@inject ISeriesService SeriesService
@inject NavigationManager NavigationManager

<h3>@serieToShow</h3>

@if (MF == null)
{
    <h4>Loading.......</h4>
}
else
{
    <h4>You own @owned of @MF.Count</h4>
    <div class="card-deck" style="margin-right:auto; margin-left:auto;">

        @foreach (var figure in MF)
        {
            <div class="card-body" style="background-color:@Color; max-width: 315px; height:440px ;padding:15px; margin:5px; border-radius:15px">
                <div class="card-body" style="background-color:white; text-align: center;width: 285px; height: 410px; border-radius: 15px">
                    <img src="@figure.ImgURL" style="max-width:230px;height:230px" alt="Picture of @figure.Name" @onclick="(() => IncrementMF(figure.Number))" />
                    <h4 class="card-title">@figure.Name</h4>
                    <table>
                        <tr>
                            <td style="text-align:right; width:60%">In display:</td>
                            <td style="width:40%">@figure.Displayed</td>
                        </tr>
                        <tr>
                            <td style="text-align:right">Ownd openend:</td>
                            <td>@figure.CountOpened</td>
                        </tr>
                        <tr>
                            <td style="text-align:right">Ownd sealed:</td>
                            <td>@figure.CountSealed</td>
                        </tr>
                    </table>
                    <div style="text-align:right;color:@Color"><a class="fas fa-info-circle fa-2x" @onclick="(() => ShowOne(figure.Number))"></a></div>
                </div>
            </div>
        }
    </div>

}
@code {
    [Parameter]
    public string serieToShow { get; set; }
    List<MiniFigure> MF;
    public int number { get; set; }
    protected MiniFigure SingleMF = new MiniFigure();
    public Series series { get; set; }
    public string Color { get; set; }
    public int owned { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await SendCollectionName(serieToShow);
        series = await SeriesService.GetOneSerie(serieToShow);
        Color = series.SeriesColor;
        Owned();
    }
    public async Task SendCollectionName(string collectionName)
    {
        MF = Mini.GetMiniFigures(collectionName);
    }
    private void ShowOne(int number)
    {
        var figure = number.ToString();
        NavigationManager.NavigateTo($"/{serieToShow}/{figure}");
    }
    private async Task IncrementMF(int number)
    {
        SingleMF = await Mini.GetOneMiniFigure(serieToShow, number);
        if (SingleMF.CountSealed == 0 && SingleMF.CountOpened == 0 || SingleMF.Displayed == true)
        {
            SingleMF.CountSealed++;
            owned++;
        }
        else if (SingleMF.CountSealed == 1 && SingleMF.CountOpened == 0)
        {
            SingleMF.CountSealed = 0;
            SingleMF.CountOpened++;
        }
        else if (SingleMF.CountOpened == 1)
        {
            SingleMF.Displayed = true;
        }

        await Mini.EditFigure(SingleMF.Number, SingleMF, serieToShow);
        await SendCollectionName(serieToShow);
    }
    private void Owned()
    {
        owned = 0;
        foreach (var figure in MF)
        {
            if (figure.CountSealed > 0 || figure.CountOpened > 0)
            {
                owned++;
            }
        }
    }
}
