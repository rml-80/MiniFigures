@page "/addnew/serie"

@using MiniFigures.Data
@using MiniFigures.Models

@inject IMiniFigureService MiniFigureService
@inject ISeriesService SeriesService
@inject NavigationManager NavigationManager
<style>
    .txtCenter {
        text-align: center;
    }
    .addSeriesCard {
        width: 35rem;
        /*height: 21rem;*/
        border: solid 0.6rem;
        border-radius: 10px;
        margin: 1rem auto 1rem auto;
        padding-top: 1rem;
    }
    .labelAddSerie {
        text-align: right;
        width: 30%;
        height: 2rem;
    }
    .btnRow {
        margin-top: 1rem;
        margin-bottom: 1rem;
        text-align: center;
    }
</style>
<h3>Add Serie</h3>
<div class="txtCenter">
    <div class="addSeriesCard" style="border-color:@Color">
        <EditForm Model="@Serie">
            <label class="labelAddSerie">
                Color code:
            </label>
            <input form="SeriesColor" @onchange="@ColorChange" tabindex="1" />
            <br/>
            <label class="labelAddSerie">
                Realese Date:
            </label>
            <input form="ReleaseDate" @bind="@Serie.ReleaseDate" placeholder="YYYY-MM" tabindex="2" />
            <br />
            <label class="labelAddSerie">
                Number:
            </label>
            <input form="Number" @onchange="@checkNumber" tabindex="3" />
            <br />
            <label class="labelAddSerie">
                Name/Number:
            </label>
            <input form="Name" @bind="@Serie.DisplayName" tabindex="4" />
            <br />
            <label class="labelAddSerie" for="NumberOfFiguers">
                Number of figures:
            </label>
            <input form="NumberOfFigures" @bind="@Serie.NumberOfFigures" tabindex="5" />

        </EditForm>

        <div class="btnRow">
            <input class="btn btn-outline-dark" type="button" @onclick="@cancel" value="Cancel" />
            <input class="btn btn-outline-success" type="button" @onclick="@AddSerie" value="Save" tabindex="6" />
        </div>
    </div>
    <h3 style="display:@ShowWarningForNumber; text-align:center; color:red ">Number already exists!</h3>
</div>

@code {
    private List<Series> SeriesList = new List<Series>();
    private Series Serie = new Series();

    private bool CanSave { get; set; }
    private bool Existing { get; set; }

    private string Color { get; set; } = "lightgrey";
    private string CurrentNumber { get; set; }
    private string ShowWarningForNumber { get; set; } = "none";

    protected override async Task OnInitializedAsync()
    {
        SeriesList = await SeriesService.GetSeries("A-Z");
    }
    //private async Task Save()
    //{
    //    await AddSerie();
    //    NavigationManager.NavigateTo("/", true);
    //}
    //private async Task AddPictures()
    //{
    //    await AddSerie();
    //    NavigationManager.NavigateTo($"/fileupload/{Serie.Name}");
    //}
    private async Task AddSerie()
    {
        if (CanSave)
        {
            if (Serie.DisplayName == null)
            {
                Serie.DisplayName = "Rename serie";     //TODO: Require this
            }
            await SeriesService.AddSerie(Serie);
            await SeriesService.CreateNewCollection(Serie.Name);
            await MiniFigureService.AddFiguresToDb(Serie.NumberOfFigures, Serie.Name, Serie.Number);
            NavigationManager.NavigateTo($"/addnew/figures/{Serie.Name}");
        }
    }

    //private void SetName(ChangeEventArgs args)
    //{
    //    Serie.DisplayName = "Serie " + args.Value.ToString();
    //    Serie.Name = Serie.DisplayName.Replace(" ", "_");
    //}

    private void ColorChange(ChangeEventArgs args)
    {
        Color = (string)args.Value;
        Serie.SeriesColor = Color;
    }

    private void isExist(string number)
    {
        foreach (var s in SeriesList)
        {
            if (number == s.Number)
            {
                Existing = true;
                break;
            }
            else
            {
                Existing = false;
            }
        }
    }

    private void checkNumber(ChangeEventArgs args)
    {
        if (args != null)
        {
            CurrentNumber = (string)args.Value;
            isExist(CurrentNumber);

            if (Existing)
            {
                ShowWarningForNumber = "inline";
                Existing = false;
            }
            else
            {
                ShowWarningForNumber = "none";
                Serie.Number = (string)args.Value;
                CurrentNumber = null;
                CanSave = true;
            }
        }
    }

    private void cancel() => NavigationManager.NavigateTo("/");
}