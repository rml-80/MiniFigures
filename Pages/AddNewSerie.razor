@page "/addnew/serie"

@using MiniFigures.Data
@using MiniFigures.Models

@inject IMiniFigureService MiniFigureService
@inject ISeriesService SeriesService
@inject NavigationManager NavigationManager

<h3>Add Serie</h3>
<div class="txtCenter">
    <div class="addSeriesCard" style="border-color:@Color">
        <div class="row">
            <div class="labelEditSerie">
                <label for="SeriesColor">Color code: </label>
            </div>
            <div>
                <input form="SeriesColor" @onchange="@ColorChange" />
            </div>
        </div>
        <div class="row">
            <div class="labelEditSerie">
                <label for="ReleaseDate">Release Date: </label>
            </div>
            <div>
                <input form="ReleaseDate" @bind="@Serie.ReleaseDate" />
            </div>
        </div>
        <div class="row">
            <div class="labelEditSerie">
                <label for="Number">Number: </label>
            </div>
            <div>
                <input form="Number" @onchange="@checkNumber" />
            </div>
        </div>
        <div class="row">
            <div class="labelEditSerie">
                <label for="Name">Name/Number: </label>
            </div>
            <div>
                <input form="Name" @bind="@Serie.DisplayName" />
            </div>
        </div>
        <div class="row">
            <div class="labelEditSerie">
                <label for="NumberOfFiguers">Number of figures: </label>
            </div>
            <div>
                <input form="NumberOfFigures" @bind="@Serie.NumberOfFigures" />
            </div>
        </div>
        <div class="row">
            <div class="labelEditSerie">
                <label for="SeriePicture">Path to picture: </label>
            </div>
            <div>
                <input form="SeriePicture" @bind="@Serie.SeriePicture" />
            </div>
        </div>
        <div class="btnRow">
            <input class="btn btn-outline-dark" type="button" @onclick="@cancel" value="Cancel" />
            <input class="btn btn-outline-success" type="button" @onclick="@AddSerie" value="Save" />
        </div>
    </div>
    <h3 style="display:@ShowWarningForNumber; text-align:center; color:red ">Number already exists!</h3>
</div>

@code {
    protected List<Series> SeriesList = new List<Series>();
    protected MiniFigure miniFigure = new MiniFigure();
    protected Series Serie = new Series();

    protected bool CanSave { get; set; }
    protected bool Existing { get; set; }

    protected string Color { get; set; } = "lightgrey";
    protected string CurrentNumber { get; set; }
    protected string ShowWarningForNumber { get; set; } = "none";

    protected override async Task OnInitializedAsync()
    {
        SeriesList = await SeriesService.GetSeries(1);
    }
    protected async Task AddSerie()
    {
        if (CanSave)
        {
            if (Serie.DisplayName == null)
            {
                Serie.DisplayName = "Rename serie";
            }
            await SeriesService.AddSerie(Serie);
            await SeriesService.CreateNewCollection(Serie.Name);
            await MiniFigureService.AddFiguresToDb(Serie.NumberOfFigures, Serie.Name);
            NavigationManager.NavigateTo($"/addnew/figures/{Serie.Name}");
        }
    }
    protected void ColorChange(ChangeEventArgs args)
    {
        Color = (string)args.Value;
        Serie.SeriesColor = Color;
    }
    protected void isExist(string number)
    {
        foreach (var s in SeriesList)
        {
            if (number == s.Number)
            {
                Existing = true;
                break;
            }
            else
            {
                Existing = false;
            }
        }
    }
    protected void checkNumber(ChangeEventArgs args)
    {
        if (args != null)
        {
            CurrentNumber = (string)args.Value;
            isExist(CurrentNumber);

            if (Existing)
            {
                ShowWarningForNumber = "inline";
                Existing = false;
            }
            else
            {
                ShowWarningForNumber = "none";
                Serie.Number = (string)args.Value;
                CurrentNumber = null;
                CanSave = true;
            }
        }
    }
    protected void cancel()
    {
        NavigationManager.NavigateTo("/");
    }
    //Add method to generate imageName
    //Add method to rename serie
}