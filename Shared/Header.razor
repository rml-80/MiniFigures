@using MiniFigures.Data
@using MiniFigures.Models
@using MiniFigures.Pages

@inject IMiniFigureService MiniFigureService
@inject ISeriesService SeriesService
@inject NavigationManager NavigationManager

@* Custom css because using SerieColor *@
<style> 
    .btn.btn-outline-info{
        color:@series.SeriesColor;
        border-color:@series.SeriesColor;
        box-shadow:none !important;
        outline:none !important;
    }
        .btn.btn-outline-info:active:hover,
        .btn.btn-outline-info:hover {
            background-color: @series.SeriesColor;
            color: white;
            border-color: @series.SeriesColor;
            box-shadow: none !important;
            outline: none !important;
        }
</style>

<div class="headerCenter" style="background-color:@series.SeriesColor">
    <h2>
        @series.DisplayName
        <a @onclick="() => ToggleInfo()" class="@InfoIcon SerieInfobutton"></a>
    </h2>
</div>
<div class="infoBlock" style="display:@HideShowInfo;border-color:@series.SeriesColor">
    <table class="biggerText tbl100">
        <tr style="height:45px">
            <td class="infoRow">Number:</td>
            <td class="infoRow txtCenter">@series.Number</td>
            <td class="infoRow">Release date:</td>
            <td class="infoRow txtCenter">@series.ReleaseDate</td>
            <td class="txtRight"><input class="btn btn-outline-info" type="button" @onclick="ToEdit" value="Edit" /></td>
        </tr>
        <tr style="height:45px">
            <td class="infoRow">series color:</td>
            <td class="infoRow txtCenter">@series.SeriesColor</td>
            <td class="infoRow">Number of figures:</td>
            <td class="infoRow txtCenter">@series.NumberOfFigures</td>
            <td class="txtRight">
                @if (ListOfMiniFigures.Count != series.NumberOfFigures)
                {
                    <p>@ListOfMiniFigures.Count of @series.NumberOfFigures are added to the series <input class="btn btn-outline-info" type="button" @onclick="ToAdd" value="Add figure" /></p>
                }
                else
                {
                    <div class="dropdown">
                        <input type="button" class="btn btn-light" value="More" />
                        <div class="dropdown-content dropRight">
                            <div class="btn-group-vertical">
                                <input class="btn btn-outline-secondary" type="button" value="Add all sealed" @onclick="() => addFigures(1)" />
                                <input class="btn btn-outline-secondary" type="button" value="Add all opened" @onclick="() => addFigures(2)">
                                <input class="btn btn-outline-secondary" type="button" value="Add all displayed" @onclick="() => addFigures(3)">
                            </div>
                        </div>
                    </div>
                }
            </td>
        </tr>
    </table>
</div>

<NavBarSerie SerieToShow="@series.Name" SerieColor="@series.SeriesColor" />

@if (ShowEdit)
{
    <div class="modal fade show" style="display:block;background-color: rgba(255,255,255,.8);" aria-modal="true" role="dialog" @onclick="close">
        <i class="fas fa-times fa-2x closeBtn" @onclick="close" />
        <div class="modal-dialog" @onclick:stopPropagation="true" style="width:37rem">
            <div class="modal-content" style="background-color:transparent; border:none">
                <EditSerie SerieToShow="@series.Name" />
            </div>
        </div>
    </div>
}
@if (ShowAdd)
{
    <div class="modal fade show" style="display:block;background-color: rgba(255,255,255,.8);" aria-modal="true" role="dialog">
        <i class="fas fa-times fa-2x closeBtn" @onclick="close" />
        <div class="modal-dialog" @onclick:stopPropagation="true" style="width:37rem">
            <div class="modal-content" style="background-color:transparent; border:none">
                <AddNewFigures series="@series.Name" />
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public List<MiniFigure> ListOfMiniFigures { get; set; }
    [Parameter] public Series series { get; set; }

    private string HideShowInfo { get; set; } = "none";
    private string InfoIcon { get; set; } = "fas fa-chevron-down";

    private bool ShowEdit { get; set; }

    private bool ShowAdd { get; set; }

    private void ToEdit() => ShowEdit = true;

    private void ToAdd() => ShowAdd = true;

    private void close()
    {
        ShowAdd = false;
        ShowEdit = false;
    }

    private void ToggleInfo()
    {
        if (HideShowInfo == "none")
        {
            HideShowInfo = "block";
            InfoIcon = "fas fa-chevron-up";
        }
        else
        {
            HideShowInfo = "none";
            InfoIcon = "fas fa-chevron-down";
        }
    }

    private void addFigures(int i)
    {
        switch (i)
        {
            case 1:
                foreach (var figure in ListOfMiniFigures)
                {
                    figure.CountSealed++;
                    MiniFigureService.EditFigure(figure.ID, figure, series.Name);
                }
                break;
            case 2:
                foreach (var figure in ListOfMiniFigures)
                {
                    figure.CountOpened++;
                    MiniFigureService.EditFigure(figure.ID, figure, series.Name);
                }
                break;
            case 3:
                foreach (var figure in ListOfMiniFigures)
                {
                    figure.Displayed = true;
                    MiniFigureService.EditFigure(figure.ID, figure, series.Name);
                }
                break;
            default:
                break;
        }
    }
}